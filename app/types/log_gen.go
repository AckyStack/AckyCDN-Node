package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *RequestLog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "ClientId":
			z.ClientId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClientId")
				return
			}
		case "ClientIp":
			z.ClientIp, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClientIp")
				return
			}
		case "ReqId":
			z.ReqId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqId")
				return
			}
		case "ReqUA":
			z.ReqUA, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqUA")
				return
			}
		case "ReqReferer":
			z.ReqReferer, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqReferer")
				return
			}
		case "ReqMethod":
			z.ReqMethod, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqMethod")
				return
			}
		case "ReqProtocol":
			z.ReqProtocol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqProtocol")
				return
			}
		case "ReqHost":
			z.ReqHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
		case "ReqUriScheme":
			z.ReqUriScheme, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqUriScheme")
				return
			}
		case "ReqUriPath":
			z.ReqUriPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqUriPath")
				return
			}
		case "ReqUriQss":
			z.ReqUriQss, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqUriQss")
				return
			}
		case "ReqFullUrl":
			z.ReqFullUrl, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ReqFullUrl")
				return
			}
		case "ReqTime":
			z.ReqTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ReqTime")
				return
			}
		case "ResTime":
			z.ResTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "ResTime")
				return
			}
		case "UpstreamFullUrl":
			z.UpstreamFullUrl, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "UpstreamFullUrl")
				return
			}
		case "UpstreamReqTime":
			z.UpstreamReqTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UpstreamReqTime")
				return
			}
		case "UpstreamResTime":
			z.UpstreamResTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "UpstreamResTime")
				return
			}
		case "CacheHit":
			z.CacheHit, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "CacheHit")
				return
			}
		case "ByteSend":
			z.ByteSend, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ByteSend")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RequestLog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 20
	// write "NodeId"
	err = en.Append(0xde, 0x0, 0x14, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.NodeId)
	if err != nil {
		err = msgp.WrapError(err, "NodeId")
		return
	}
	// write "ClientId"
	err = en.Append(0xa8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClientId)
	if err != nil {
		err = msgp.WrapError(err, "ClientId")
		return
	}
	// write "ClientIp"
	err = en.Append(0xa8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClientIp)
	if err != nil {
		err = msgp.WrapError(err, "ClientIp")
		return
	}
	// write "ReqId"
	err = en.Append(0xa5, 0x52, 0x65, 0x71, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqId)
	if err != nil {
		err = msgp.WrapError(err, "ReqId")
		return
	}
	// write "ReqUA"
	err = en.Append(0xa5, 0x52, 0x65, 0x71, 0x55, 0x41)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqUA)
	if err != nil {
		err = msgp.WrapError(err, "ReqUA")
		return
	}
	// write "ReqReferer"
	err = en.Append(0xaa, 0x52, 0x65, 0x71, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqReferer)
	if err != nil {
		err = msgp.WrapError(err, "ReqReferer")
		return
	}
	// write "ReqMethod"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqMethod)
	if err != nil {
		err = msgp.WrapError(err, "ReqMethod")
		return
	}
	// write "ReqProtocol"
	err = en.Append(0xab, 0x52, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqProtocol)
	if err != nil {
		err = msgp.WrapError(err, "ReqProtocol")
		return
	}
	// write "ReqHost"
	err = en.Append(0xa7, 0x52, 0x65, 0x71, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqHost)
	if err != nil {
		err = msgp.WrapError(err, "ReqHost")
		return
	}
	// write "ReqUriScheme"
	err = en.Append(0xac, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqUriScheme)
	if err != nil {
		err = msgp.WrapError(err, "ReqUriScheme")
		return
	}
	// write "ReqUriPath"
	err = en.Append(0xaa, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x50, 0x61, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqUriPath)
	if err != nil {
		err = msgp.WrapError(err, "ReqUriPath")
		return
	}
	// write "ReqUriQss"
	err = en.Append(0xa9, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x51, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqUriQss)
	if err != nil {
		err = msgp.WrapError(err, "ReqUriQss")
		return
	}
	// write "ReqFullUrl"
	err = en.Append(0xaa, 0x52, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.ReqFullUrl)
	if err != nil {
		err = msgp.WrapError(err, "ReqFullUrl")
		return
	}
	// write "ReqTime"
	err = en.Append(0xa7, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ReqTime)
	if err != nil {
		err = msgp.WrapError(err, "ReqTime")
		return
	}
	// write "ResTime"
	err = en.Append(0xa7, 0x52, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.ResTime)
	if err != nil {
		err = msgp.WrapError(err, "ResTime")
		return
	}
	// write "UpstreamFullUrl"
	err = en.Append(0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.UpstreamFullUrl)
	if err != nil {
		err = msgp.WrapError(err, "UpstreamFullUrl")
		return
	}
	// write "UpstreamReqTime"
	err = en.Append(0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UpstreamReqTime)
	if err != nil {
		err = msgp.WrapError(err, "UpstreamReqTime")
		return
	}
	// write "UpstreamResTime"
	err = en.Append(0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.UpstreamResTime)
	if err != nil {
		err = msgp.WrapError(err, "UpstreamResTime")
		return
	}
	// write "CacheHit"
	err = en.Append(0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.CacheHit)
	if err != nil {
		err = msgp.WrapError(err, "CacheHit")
		return
	}
	// write "ByteSend"
	err = en.Append(0xa8, 0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ByteSend)
	if err != nil {
		err = msgp.WrapError(err, "ByteSend")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RequestLog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 20
	// string "NodeId"
	o = append(o, 0xde, 0x0, 0x14, 0xa6, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64)
	o = msgp.AppendString(o, z.NodeId)
	// string "ClientId"
	o = append(o, 0xa8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64)
	o = msgp.AppendString(o, z.ClientId)
	// string "ClientIp"
	o = append(o, 0xa8, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x70)
	o = msgp.AppendString(o, z.ClientIp)
	// string "ReqId"
	o = append(o, 0xa5, 0x52, 0x65, 0x71, 0x49, 0x64)
	o = msgp.AppendString(o, z.ReqId)
	// string "ReqUA"
	o = append(o, 0xa5, 0x52, 0x65, 0x71, 0x55, 0x41)
	o = msgp.AppendString(o, z.ReqUA)
	// string "ReqReferer"
	o = append(o, 0xaa, 0x52, 0x65, 0x71, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x72)
	o = msgp.AppendString(o, z.ReqReferer)
	// string "ReqMethod"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.ReqMethod)
	// string "ReqProtocol"
	o = append(o, 0xab, 0x52, 0x65, 0x71, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.ReqProtocol)
	// string "ReqHost"
	o = append(o, 0xa7, 0x52, 0x65, 0x71, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.ReqHost)
	// string "ReqUriScheme"
	o = append(o, 0xac, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65)
	o = msgp.AppendString(o, z.ReqUriScheme)
	// string "ReqUriPath"
	o = append(o, 0xaa, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x50, 0x61, 0x74, 0x68)
	o = msgp.AppendString(o, z.ReqUriPath)
	// string "ReqUriQss"
	o = append(o, 0xa9, 0x52, 0x65, 0x71, 0x55, 0x72, 0x69, 0x51, 0x73, 0x73)
	o = msgp.AppendString(o, z.ReqUriQss)
	// string "ReqFullUrl"
	o = append(o, 0xaa, 0x52, 0x65, 0x71, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c)
	o = msgp.AppendString(o, z.ReqFullUrl)
	// string "ReqTime"
	o = append(o, 0xa7, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.ReqTime)
	// string "ResTime"
	o = append(o, 0xa7, 0x52, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.ResTime)
	// string "UpstreamFullUrl"
	o = append(o, 0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x75, 0x6c, 0x6c, 0x55, 0x72, 0x6c)
	o = msgp.AppendString(o, z.UpstreamFullUrl)
	// string "UpstreamReqTime"
	o = append(o, 0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.UpstreamReqTime)
	// string "UpstreamResTime"
	o = append(o, 0xaf, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.UpstreamResTime)
	// string "CacheHit"
	o = append(o, 0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74)
	o = msgp.AppendBool(o, z.CacheHit)
	// string "ByteSend"
	o = append(o, 0xa8, 0x42, 0x79, 0x74, 0x65, 0x53, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.ByteSend)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RequestLog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "NodeId":
			z.NodeId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NodeId")
				return
			}
		case "ClientId":
			z.ClientId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientId")
				return
			}
		case "ClientIp":
			z.ClientIp, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientIp")
				return
			}
		case "ReqId":
			z.ReqId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqId")
				return
			}
		case "ReqUA":
			z.ReqUA, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqUA")
				return
			}
		case "ReqReferer":
			z.ReqReferer, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqReferer")
				return
			}
		case "ReqMethod":
			z.ReqMethod, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqMethod")
				return
			}
		case "ReqProtocol":
			z.ReqProtocol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqProtocol")
				return
			}
		case "ReqHost":
			z.ReqHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqHost")
				return
			}
		case "ReqUriScheme":
			z.ReqUriScheme, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqUriScheme")
				return
			}
		case "ReqUriPath":
			z.ReqUriPath, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqUriPath")
				return
			}
		case "ReqUriQss":
			z.ReqUriQss, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqUriQss")
				return
			}
		case "ReqFullUrl":
			z.ReqFullUrl, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqFullUrl")
				return
			}
		case "ReqTime":
			z.ReqTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReqTime")
				return
			}
		case "ResTime":
			z.ResTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ResTime")
				return
			}
		case "UpstreamFullUrl":
			z.UpstreamFullUrl, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpstreamFullUrl")
				return
			}
		case "UpstreamReqTime":
			z.UpstreamReqTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpstreamReqTime")
				return
			}
		case "UpstreamResTime":
			z.UpstreamResTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpstreamResTime")
				return
			}
		case "CacheHit":
			z.CacheHit, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheHit")
				return
			}
		case "ByteSend":
			z.ByteSend, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ByteSend")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RequestLog) Msgsize() (s int) {
	s = 3 + 7 + msgp.StringPrefixSize + len(z.NodeId) + 9 + msgp.StringPrefixSize + len(z.ClientId) + 9 + msgp.StringPrefixSize + len(z.ClientIp) + 6 + msgp.StringPrefixSize + len(z.ReqId) + 6 + msgp.StringPrefixSize + len(z.ReqUA) + 11 + msgp.StringPrefixSize + len(z.ReqReferer) + 10 + msgp.StringPrefixSize + len(z.ReqMethod) + 12 + msgp.StringPrefixSize + len(z.ReqProtocol) + 8 + msgp.StringPrefixSize + len(z.ReqHost) + 13 + msgp.StringPrefixSize + len(z.ReqUriScheme) + 11 + msgp.StringPrefixSize + len(z.ReqUriPath) + 10 + msgp.StringPrefixSize + len(z.ReqUriQss) + 11 + msgp.StringPrefixSize + len(z.ReqFullUrl) + 8 + msgp.Int64Size + 8 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.UpstreamFullUrl) + 16 + msgp.Int64Size + 16 + msgp.Int64Size + 9 + msgp.BoolSize + 9 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *WafLog) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WafType":
			z.WafType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "WafType")
				return
			}
		case "Message":
			z.Message, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "Data":
			z.Data, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "AdditionalData":
			z.AdditionalData, err = dc.ReadBytes(z.AdditionalData)
			if err != nil {
				err = msgp.WrapError(err, "AdditionalData")
				return
			}
		case "URI":
			z.URI, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "URI")
				return
			}
		case "TransactionID":
			z.TransactionID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		case "Disruptive":
			z.Disruptive, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Disruptive")
				return
			}
		case "ClientIPAddress":
			z.ClientIPAddress, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ClientIPAddress")
				return
			}
		case "CreateTime":
			z.CreateTime, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *WafLog) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 9
	// write "WafType"
	err = en.Append(0x89, 0xa7, 0x57, 0x61, 0x66, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.WafType)
	if err != nil {
		err = msgp.WrapError(err, "WafType")
		return
	}
	// write "Message"
	err = en.Append(0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	// write "Data"
	err = en.Append(0xa4, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteString(z.Data)
	if err != nil {
		err = msgp.WrapError(err, "Data")
		return
	}
	// write "AdditionalData"
	err = en.Append(0xae, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.AdditionalData)
	if err != nil {
		err = msgp.WrapError(err, "AdditionalData")
		return
	}
	// write "URI"
	err = en.Append(0xa3, 0x55, 0x52, 0x49)
	if err != nil {
		return
	}
	err = en.WriteString(z.URI)
	if err != nil {
		err = msgp.WrapError(err, "URI")
		return
	}
	// write "TransactionID"
	err = en.Append(0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.TransactionID)
	if err != nil {
		err = msgp.WrapError(err, "TransactionID")
		return
	}
	// write "Disruptive"
	err = en.Append(0xaa, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Disruptive)
	if err != nil {
		err = msgp.WrapError(err, "Disruptive")
		return
	}
	// write "ClientIPAddress"
	err = en.Append(0xaf, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(z.ClientIPAddress)
	if err != nil {
		err = msgp.WrapError(err, "ClientIPAddress")
		return
	}
	// write "CreateTime"
	err = en.Append(0xaa, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.CreateTime)
	if err != nil {
		err = msgp.WrapError(err, "CreateTime")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *WafLog) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 9
	// string "WafType"
	o = append(o, 0x89, 0xa7, 0x57, 0x61, 0x66, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.WafType)
	// string "Message"
	o = append(o, 0xa7, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65)
	o = msgp.AppendString(o, z.Message)
	// string "Data"
	o = append(o, 0xa4, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendString(o, z.Data)
	// string "AdditionalData"
	o = append(o, 0xae, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61)
	o = msgp.AppendBytes(o, z.AdditionalData)
	// string "URI"
	o = append(o, 0xa3, 0x55, 0x52, 0x49)
	o = msgp.AppendString(o, z.URI)
	// string "TransactionID"
	o = append(o, 0xad, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44)
	o = msgp.AppendString(o, z.TransactionID)
	// string "Disruptive"
	o = append(o, 0xaa, 0x44, 0x69, 0x73, 0x72, 0x75, 0x70, 0x74, 0x69, 0x76, 0x65)
	o = msgp.AppendBool(o, z.Disruptive)
	// string "ClientIPAddress"
	o = append(o, 0xaf, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73)
	o = msgp.AppendString(o, z.ClientIPAddress)
	// string "CreateTime"
	o = append(o, 0xaa, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt64(o, z.CreateTime)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *WafLog) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "WafType":
			z.WafType, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WafType")
				return
			}
		case "Message":
			z.Message, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Message")
				return
			}
		case "Data":
			z.Data, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Data")
				return
			}
		case "AdditionalData":
			z.AdditionalData, bts, err = msgp.ReadBytesBytes(bts, z.AdditionalData)
			if err != nil {
				err = msgp.WrapError(err, "AdditionalData")
				return
			}
		case "URI":
			z.URI, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "URI")
				return
			}
		case "TransactionID":
			z.TransactionID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionID")
				return
			}
		case "Disruptive":
			z.Disruptive, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Disruptive")
				return
			}
		case "ClientIPAddress":
			z.ClientIPAddress, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ClientIPAddress")
				return
			}
		case "CreateTime":
			z.CreateTime, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreateTime")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *WafLog) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.WafType) + 8 + msgp.StringPrefixSize + len(z.Message) + 5 + msgp.StringPrefixSize + len(z.Data) + 15 + msgp.BytesPrefixSize + len(z.AdditionalData) + 4 + msgp.StringPrefixSize + len(z.URI) + 14 + msgp.StringPrefixSize + len(z.TransactionID) + 11 + msgp.BoolSize + 16 + msgp.StringPrefixSize + len(z.ClientIPAddress) + 11 + msgp.Int64Size
	return
}
