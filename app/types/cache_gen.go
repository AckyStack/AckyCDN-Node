package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CdnCacheItem) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheKey":
			z.CacheKey, err = dc.ReadBytes(z.CacheKey)
			if err != nil {
				err = msgp.WrapError(err, "CacheKey")
				return
			}
		case "Encoding":
			z.Encoding, err = dc.ReadBytes(z.Encoding)
			if err != nil {
				err = msgp.WrapError(err, "Encoding")
				return
			}
		case "Body":
			z.Body, err = dc.ReadBytes(z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "StatusCode":
			z.StatusCode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "ContentType":
			z.ContentType, err = dc.ReadBytes(z.ContentType)
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CdnCacheItem) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "CacheKey"
	err = en.Append(0x85, 0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.CacheKey)
	if err != nil {
		err = msgp.WrapError(err, "CacheKey")
		return
	}
	// write "Encoding"
	err = en.Append(0xa8, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Encoding)
	if err != nil {
		err = msgp.WrapError(err, "Encoding")
		return
	}
	// write "Body"
	err = en.Append(0xa4, 0x42, 0x6f, 0x64, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Body)
	if err != nil {
		err = msgp.WrapError(err, "Body")
		return
	}
	// write "StatusCode"
	err = en.Append(0xaa, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.StatusCode)
	if err != nil {
		err = msgp.WrapError(err, "StatusCode")
		return
	}
	// write "ContentType"
	err = en.Append(0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.ContentType)
	if err != nil {
		err = msgp.WrapError(err, "ContentType")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CdnCacheItem) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "CacheKey"
	o = append(o, 0x85, 0xa8, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.CacheKey)
	// string "Encoding"
	o = append(o, 0xa8, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67)
	o = msgp.AppendBytes(o, z.Encoding)
	// string "Body"
	o = append(o, 0xa4, 0x42, 0x6f, 0x64, 0x79)
	o = msgp.AppendBytes(o, z.Body)
	// string "StatusCode"
	o = append(o, 0xaa, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.StatusCode)
	// string "ContentType"
	o = append(o, 0xab, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendBytes(o, z.ContentType)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CdnCacheItem) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheKey":
			z.CacheKey, bts, err = msgp.ReadBytesBytes(bts, z.CacheKey)
			if err != nil {
				err = msgp.WrapError(err, "CacheKey")
				return
			}
		case "Encoding":
			z.Encoding, bts, err = msgp.ReadBytesBytes(bts, z.Encoding)
			if err != nil {
				err = msgp.WrapError(err, "Encoding")
				return
			}
		case "Body":
			z.Body, bts, err = msgp.ReadBytesBytes(bts, z.Body)
			if err != nil {
				err = msgp.WrapError(err, "Body")
				return
			}
		case "StatusCode":
			z.StatusCode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "StatusCode")
				return
			}
		case "ContentType":
			z.ContentType, bts, err = msgp.ReadBytesBytes(bts, z.ContentType)
			if err != nil {
				err = msgp.WrapError(err, "ContentType")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CdnCacheItem) Msgsize() (s int) {
	s = 1 + 9 + msgp.BytesPrefixSize + len(z.CacheKey) + 9 + msgp.BytesPrefixSize + len(z.Encoding) + 5 + msgp.BytesPrefixSize + len(z.Body) + 11 + msgp.IntSize + 12 + msgp.BytesPrefixSize + len(z.ContentType)
	return
}
