package types

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CacheConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheEnabled":
			z.CacheEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "CacheEnabled")
				return
			}
		case "CacheFileUrlSuffixes":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "CacheFileUrlSuffixes")
				return
			}
			if cap(z.CacheFileUrlSuffixes) >= int(zb0002) {
				z.CacheFileUrlSuffixes = (z.CacheFileUrlSuffixes)[:zb0002]
			} else {
				z.CacheFileUrlSuffixes = make([]string, zb0002)
			}
			for za0001 := range z.CacheFileUrlSuffixes {
				z.CacheFileUrlSuffixes[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "CacheFileUrlSuffixes", za0001)
					return
				}
			}
		case "CacheExpiration":
			z.CacheExpiration, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "CacheExpiration")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CacheConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "CacheEnabled"
	err = en.Append(0x83, 0xac, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.CacheEnabled)
	if err != nil {
		err = msgp.WrapError(err, "CacheEnabled")
		return
	}
	// write "CacheFileUrlSuffixes"
	err = en.Append(0xb4, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.CacheFileUrlSuffixes)))
	if err != nil {
		err = msgp.WrapError(err, "CacheFileUrlSuffixes")
		return
	}
	for za0001 := range z.CacheFileUrlSuffixes {
		err = en.WriteString(z.CacheFileUrlSuffixes[za0001])
		if err != nil {
			err = msgp.WrapError(err, "CacheFileUrlSuffixes", za0001)
			return
		}
	}
	// write "CacheExpiration"
	err = en.Append(0xaf, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.CacheExpiration)
	if err != nil {
		err = msgp.WrapError(err, "CacheExpiration")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CacheConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "CacheEnabled"
	o = append(o, 0x83, 0xac, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.CacheEnabled)
	// string "CacheFileUrlSuffixes"
	o = append(o, 0xb4, 0x43, 0x61, 0x63, 0x68, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.CacheFileUrlSuffixes)))
	for za0001 := range z.CacheFileUrlSuffixes {
		o = msgp.AppendString(o, z.CacheFileUrlSuffixes[za0001])
	}
	// string "CacheExpiration"
	o = append(o, 0xaf, 0x43, 0x61, 0x63, 0x68, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.CacheExpiration)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CacheConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CacheEnabled":
			z.CacheEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheEnabled")
				return
			}
		case "CacheFileUrlSuffixes":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheFileUrlSuffixes")
				return
			}
			if cap(z.CacheFileUrlSuffixes) >= int(zb0002) {
				z.CacheFileUrlSuffixes = (z.CacheFileUrlSuffixes)[:zb0002]
			} else {
				z.CacheFileUrlSuffixes = make([]string, zb0002)
			}
			for za0001 := range z.CacheFileUrlSuffixes {
				z.CacheFileUrlSuffixes[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "CacheFileUrlSuffixes", za0001)
					return
				}
			}
		case "CacheExpiration":
			z.CacheExpiration, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CacheExpiration")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CacheConfig) Msgsize() (s int) {
	s = 1 + 13 + msgp.BoolSize + 21 + msgp.ArrayHeaderSize
	for za0001 := range z.CacheFileUrlSuffixes {
		s += msgp.StringPrefixSize + len(z.CacheFileUrlSuffixes[za0001])
	}
	s += 16 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *SecurityConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SShieldEnabled":
			z.SShieldEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "SShieldEnabled")
				return
			}
		case "OwaspCRSEnabled":
			z.OwaspCRSEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "OwaspCRSEnabled")
				return
			}
		case "AlwaysCaptchaEnabled":
			z.AlwaysCaptchaEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "AlwaysCaptchaEnabled")
				return
			}
		case "RateLimitEnabled":
			z.RateLimitEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "RateLimitEnabled")
				return
			}
		case "RateLimitRate":
			z.RateLimitRate, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "RateLimitRate")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *SecurityConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "SShieldEnabled"
	err = en.Append(0x85, 0xae, 0x53, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.SShieldEnabled)
	if err != nil {
		err = msgp.WrapError(err, "SShieldEnabled")
		return
	}
	// write "OwaspCRSEnabled"
	err = en.Append(0xaf, 0x4f, 0x77, 0x61, 0x73, 0x70, 0x43, 0x52, 0x53, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.OwaspCRSEnabled)
	if err != nil {
		err = msgp.WrapError(err, "OwaspCRSEnabled")
		return
	}
	// write "AlwaysCaptchaEnabled"
	err = en.Append(0xb4, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.AlwaysCaptchaEnabled)
	if err != nil {
		err = msgp.WrapError(err, "AlwaysCaptchaEnabled")
		return
	}
	// write "RateLimitEnabled"
	err = en.Append(0xb0, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.RateLimitEnabled)
	if err != nil {
		err = msgp.WrapError(err, "RateLimitEnabled")
		return
	}
	// write "RateLimitRate"
	err = en.Append(0xad, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.RateLimitRate)
	if err != nil {
		err = msgp.WrapError(err, "RateLimitRate")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *SecurityConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "SShieldEnabled"
	o = append(o, 0x85, 0xae, 0x53, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.SShieldEnabled)
	// string "OwaspCRSEnabled"
	o = append(o, 0xaf, 0x4f, 0x77, 0x61, 0x73, 0x70, 0x43, 0x52, 0x53, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.OwaspCRSEnabled)
	// string "AlwaysCaptchaEnabled"
	o = append(o, 0xb4, 0x41, 0x6c, 0x77, 0x61, 0x79, 0x73, 0x43, 0x61, 0x70, 0x74, 0x63, 0x68, 0x61, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.AlwaysCaptchaEnabled)
	// string "RateLimitEnabled"
	o = append(o, 0xb0, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.RateLimitEnabled)
	// string "RateLimitRate"
	o = append(o, 0xad, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65)
	o = msgp.AppendInt(o, z.RateLimitRate)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SecurityConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SShieldEnabled":
			z.SShieldEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SShieldEnabled")
				return
			}
		case "OwaspCRSEnabled":
			z.OwaspCRSEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OwaspCRSEnabled")
				return
			}
		case "AlwaysCaptchaEnabled":
			z.AlwaysCaptchaEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AlwaysCaptchaEnabled")
				return
			}
		case "RateLimitEnabled":
			z.RateLimitEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RateLimitEnabled")
				return
			}
		case "RateLimitRate":
			z.RateLimitRate, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RateLimitRate")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *SecurityConfig) Msgsize() (s int) {
	s = 1 + 15 + msgp.BoolSize + 16 + msgp.BoolSize + 21 + msgp.BoolSize + 17 + msgp.BoolSize + 14 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TlsConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SSLEnabled":
			z.SSLEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "SSLEnabled")
				return
			}
		case "RedirectHttpsEnabled":
			z.RedirectHttpsEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "RedirectHttpsEnabled")
				return
			}
		case "HSTSEnabled":
			z.HSTSEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "HSTSEnabled")
				return
			}
		case "Certificate":
			z.Certificate, err = dc.ReadBytes(z.Certificate)
			if err != nil {
				err = msgp.WrapError(err, "Certificate")
				return
			}
		case "Key":
			z.Key, err = dc.ReadBytes(z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TlsConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "SSLEnabled"
	err = en.Append(0x85, 0xaa, 0x53, 0x53, 0x4c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.SSLEnabled)
	if err != nil {
		err = msgp.WrapError(err, "SSLEnabled")
		return
	}
	// write "RedirectHttpsEnabled"
	err = en.Append(0xb4, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x74, 0x74, 0x70, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.RedirectHttpsEnabled)
	if err != nil {
		err = msgp.WrapError(err, "RedirectHttpsEnabled")
		return
	}
	// write "HSTSEnabled"
	err = en.Append(0xab, 0x48, 0x53, 0x54, 0x53, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.HSTSEnabled)
	if err != nil {
		err = msgp.WrapError(err, "HSTSEnabled")
		return
	}
	// write "Certificate"
	err = en.Append(0xab, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Certificate)
	if err != nil {
		err = msgp.WrapError(err, "Certificate")
		return
	}
	// write "Key"
	err = en.Append(0xa3, 0x4b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteBytes(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TlsConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "SSLEnabled"
	o = append(o, 0x85, 0xaa, 0x53, 0x53, 0x4c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.SSLEnabled)
	// string "RedirectHttpsEnabled"
	o = append(o, 0xb4, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x74, 0x74, 0x70, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.RedirectHttpsEnabled)
	// string "HSTSEnabled"
	o = append(o, 0xab, 0x48, 0x53, 0x54, 0x53, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.HSTSEnabled)
	// string "Certificate"
	o = append(o, 0xab, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65)
	o = msgp.AppendBytes(o, z.Certificate)
	// string "Key"
	o = append(o, 0xa3, 0x4b, 0x65, 0x79)
	o = msgp.AppendBytes(o, z.Key)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TlsConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "SSLEnabled":
			z.SSLEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SSLEnabled")
				return
			}
		case "RedirectHttpsEnabled":
			z.RedirectHttpsEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RedirectHttpsEnabled")
				return
			}
		case "HSTSEnabled":
			z.HSTSEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HSTSEnabled")
				return
			}
		case "Certificate":
			z.Certificate, bts, err = msgp.ReadBytesBytes(bts, z.Certificate)
			if err != nil {
				err = msgp.WrapError(err, "Certificate")
				return
			}
		case "Key":
			z.Key, bts, err = msgp.ReadBytesBytes(bts, z.Key)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TlsConfig) Msgsize() (s int) {
	s = 1 + 11 + msgp.BoolSize + 21 + msgp.BoolSize + 12 + msgp.BoolSize + 12 + msgp.BytesPrefixSize + len(z.Certificate) + 4 + msgp.BytesPrefixSize + len(z.Key)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Upstream) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Host":
			z.Host, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "Port":
			z.Port, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Port")
				return
			}
		case "Weight":
			z.Weight, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Weight")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Upstream) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "Host"
	err = en.Append(0x83, 0xa4, 0x48, 0x6f, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Host)
	if err != nil {
		err = msgp.WrapError(err, "Host")
		return
	}
	// write "Port"
	err = en.Append(0xa4, 0x50, 0x6f, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Port)
	if err != nil {
		err = msgp.WrapError(err, "Port")
		return
	}
	// write "Weight"
	err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Weight)
	if err != nil {
		err = msgp.WrapError(err, "Weight")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Upstream) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "Host"
	o = append(o, 0x83, 0xa4, 0x48, 0x6f, 0x73, 0x74)
	o = msgp.AppendString(o, z.Host)
	// string "Port"
	o = append(o, 0xa4, 0x50, 0x6f, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Port)
	// string "Weight"
	o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
	o = msgp.AppendInt(o, z.Weight)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Upstream) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Host":
			z.Host, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Host")
				return
			}
		case "Port":
			z.Port, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Port")
				return
			}
		case "Weight":
			z.Weight, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Weight")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Upstream) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Host) + 5 + msgp.IntSize + 7 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VHostConfig) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DomainName":
			z.DomainName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DomainName")
				return
			}
		case "TlsConfig":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "TlsConfig")
					return
				}
				z.TlsConfig = nil
			} else {
				if z.TlsConfig == nil {
					z.TlsConfig = new(TlsConfig)
				}
				err = z.TlsConfig.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "TlsConfig")
					return
				}
			}
		case "DestinationProtocol":
			z.DestinationProtocol, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DestinationProtocol")
				return
			}
		case "DestinationHeaderRewrite":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "DestinationHeaderRewrite")
				return
			}
			if z.DestinationHeaderRewrite == nil {
				z.DestinationHeaderRewrite = make(map[string]string, zb0002)
			} else if len(z.DestinationHeaderRewrite) > 0 {
				for key := range z.DestinationHeaderRewrite {
					delete(z.DestinationHeaderRewrite, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 string
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "DestinationHeaderRewrite")
					return
				}
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "DestinationHeaderRewrite", za0001)
					return
				}
				z.DestinationHeaderRewrite[za0001] = za0002
			}
		case "Upstreams":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Upstreams")
				return
			}
			if cap(z.Upstreams) >= int(zb0003) {
				z.Upstreams = (z.Upstreams)[:zb0003]
			} else {
				z.Upstreams = make([]*Upstream, zb0003)
			}
			for za0003 := range z.Upstreams {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Upstreams", za0003)
						return
					}
					z.Upstreams[za0003] = nil
				} else {
					if z.Upstreams[za0003] == nil {
						z.Upstreams[za0003] = new(Upstream)
					}
					var zb0004 uint32
					zb0004, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "Upstreams", za0003)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "Upstreams", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Host":
							z.Upstreams[za0003].Host, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Host")
								return
							}
						case "Port":
							z.Upstreams[za0003].Port, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Port")
								return
							}
						case "Weight":
							z.Upstreams[za0003].Weight, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Weight")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003)
								return
							}
						}
					}
				}
			}
		case "LoadBalanceMethod":
			z.LoadBalanceMethod, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LoadBalanceMethod")
				return
			}
		case "SecurityControl":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "SecurityControl")
					return
				}
				z.SecurityControl = nil
			} else {
				if z.SecurityControl == nil {
					z.SecurityControl = new(SecurityConfig)
				}
				err = z.SecurityControl.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "SecurityControl")
					return
				}
			}
		case "CacheControl":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "CacheControl")
					return
				}
				z.CacheControl = nil
			} else {
				if z.CacheControl == nil {
					z.CacheControl = new(CacheConfig)
				}
				err = z.CacheControl.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "CacheControl")
					return
				}
			}
		case "CompressionEnabled":
			z.CompressionEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "CompressionEnabled")
				return
			}
		case "SeoOptimizationEnabled":
			z.SeoOptimizationEnabled, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "SeoOptimizationEnabled")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *VHostConfig) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "DomainName"
	err = en.Append(0x8a, 0xaa, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.DomainName)
	if err != nil {
		err = msgp.WrapError(err, "DomainName")
		return
	}
	// write "TlsConfig"
	err = en.Append(0xa9, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	if err != nil {
		return
	}
	if z.TlsConfig == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.TlsConfig.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "TlsConfig")
			return
		}
	}
	// write "DestinationProtocol"
	err = en.Append(0xb3, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.DestinationProtocol)
	if err != nil {
		err = msgp.WrapError(err, "DestinationProtocol")
		return
	}
	// write "DestinationHeaderRewrite"
	err = en.Append(0xb8, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.DestinationHeaderRewrite)))
	if err != nil {
		err = msgp.WrapError(err, "DestinationHeaderRewrite")
		return
	}
	for za0001, za0002 := range z.DestinationHeaderRewrite {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "DestinationHeaderRewrite")
			return
		}
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "DestinationHeaderRewrite", za0001)
			return
		}
	}
	// write "Upstreams"
	err = en.Append(0xa9, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Upstreams)))
	if err != nil {
		err = msgp.WrapError(err, "Upstreams")
		return
	}
	for za0003 := range z.Upstreams {
		if z.Upstreams[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// map header, size 3
			// write "Host"
			err = en.Append(0x83, 0xa4, 0x48, 0x6f, 0x73, 0x74)
			if err != nil {
				return
			}
			err = en.WriteString(z.Upstreams[za0003].Host)
			if err != nil {
				err = msgp.WrapError(err, "Upstreams", za0003, "Host")
				return
			}
			// write "Port"
			err = en.Append(0xa4, 0x50, 0x6f, 0x72, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Upstreams[za0003].Port)
			if err != nil {
				err = msgp.WrapError(err, "Upstreams", za0003, "Port")
				return
			}
			// write "Weight"
			err = en.Append(0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt(z.Upstreams[za0003].Weight)
			if err != nil {
				err = msgp.WrapError(err, "Upstreams", za0003, "Weight")
				return
			}
		}
	}
	// write "LoadBalanceMethod"
	err = en.Append(0xb1, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.LoadBalanceMethod)
	if err != nil {
		err = msgp.WrapError(err, "LoadBalanceMethod")
		return
	}
	// write "SecurityControl"
	err = en.Append(0xaf, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c)
	if err != nil {
		return
	}
	if z.SecurityControl == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.SecurityControl.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "SecurityControl")
			return
		}
	}
	// write "CacheControl"
	err = en.Append(0xac, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c)
	if err != nil {
		return
	}
	if z.CacheControl == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.CacheControl.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "CacheControl")
			return
		}
	}
	// write "CompressionEnabled"
	err = en.Append(0xb2, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.CompressionEnabled)
	if err != nil {
		err = msgp.WrapError(err, "CompressionEnabled")
		return
	}
	// write "SeoOptimizationEnabled"
	err = en.Append(0xb6, 0x53, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteBool(z.SeoOptimizationEnabled)
	if err != nil {
		err = msgp.WrapError(err, "SeoOptimizationEnabled")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *VHostConfig) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "DomainName"
	o = append(o, 0x8a, 0xaa, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.DomainName)
	// string "TlsConfig"
	o = append(o, 0xa9, 0x54, 0x6c, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67)
	if z.TlsConfig == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.TlsConfig.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "TlsConfig")
			return
		}
	}
	// string "DestinationProtocol"
	o = append(o, 0xb3, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c)
	o = msgp.AppendString(o, z.DestinationProtocol)
	// string "DestinationHeaderRewrite"
	o = append(o, 0xb8, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.DestinationHeaderRewrite)))
	for za0001, za0002 := range z.DestinationHeaderRewrite {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendString(o, za0002)
	}
	// string "Upstreams"
	o = append(o, 0xa9, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Upstreams)))
	for za0003 := range z.Upstreams {
		if z.Upstreams[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			// map header, size 3
			// string "Host"
			o = append(o, 0x83, 0xa4, 0x48, 0x6f, 0x73, 0x74)
			o = msgp.AppendString(o, z.Upstreams[za0003].Host)
			// string "Port"
			o = append(o, 0xa4, 0x50, 0x6f, 0x72, 0x74)
			o = msgp.AppendInt(o, z.Upstreams[za0003].Port)
			// string "Weight"
			o = append(o, 0xa6, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74)
			o = msgp.AppendInt(o, z.Upstreams[za0003].Weight)
		}
	}
	// string "LoadBalanceMethod"
	o = append(o, 0xb1, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64)
	o = msgp.AppendString(o, z.LoadBalanceMethod)
	// string "SecurityControl"
	o = append(o, 0xaf, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c)
	if z.SecurityControl == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.SecurityControl.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "SecurityControl")
			return
		}
	}
	// string "CacheControl"
	o = append(o, 0xac, 0x43, 0x61, 0x63, 0x68, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c)
	if z.CacheControl == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.CacheControl.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "CacheControl")
			return
		}
	}
	// string "CompressionEnabled"
	o = append(o, 0xb2, 0x43, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.CompressionEnabled)
	// string "SeoOptimizationEnabled"
	o = append(o, 0xb6, 0x53, 0x65, 0x6f, 0x4f, 0x70, 0x74, 0x69, 0x6d, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64)
	o = msgp.AppendBool(o, z.SeoOptimizationEnabled)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VHostConfig) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DomainName":
			z.DomainName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DomainName")
				return
			}
		case "TlsConfig":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.TlsConfig = nil
			} else {
				if z.TlsConfig == nil {
					z.TlsConfig = new(TlsConfig)
				}
				bts, err = z.TlsConfig.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TlsConfig")
					return
				}
			}
		case "DestinationProtocol":
			z.DestinationProtocol, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DestinationProtocol")
				return
			}
		case "DestinationHeaderRewrite":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DestinationHeaderRewrite")
				return
			}
			if z.DestinationHeaderRewrite == nil {
				z.DestinationHeaderRewrite = make(map[string]string, zb0002)
			} else if len(z.DestinationHeaderRewrite) > 0 {
				for key := range z.DestinationHeaderRewrite {
					delete(z.DestinationHeaderRewrite, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 string
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DestinationHeaderRewrite")
					return
				}
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DestinationHeaderRewrite", za0001)
					return
				}
				z.DestinationHeaderRewrite[za0001] = za0002
			}
		case "Upstreams":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Upstreams")
				return
			}
			if cap(z.Upstreams) >= int(zb0003) {
				z.Upstreams = (z.Upstreams)[:zb0003]
			} else {
				z.Upstreams = make([]*Upstream, zb0003)
			}
			for za0003 := range z.Upstreams {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Upstreams[za0003] = nil
				} else {
					if z.Upstreams[za0003] == nil {
						z.Upstreams[za0003] = new(Upstream)
					}
					var zb0004 uint32
					zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Upstreams", za0003)
						return
					}
					for zb0004 > 0 {
						zb0004--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "Upstreams", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "Host":
							z.Upstreams[za0003].Host, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Host")
								return
							}
						case "Port":
							z.Upstreams[za0003].Port, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Port")
								return
							}
						case "Weight":
							z.Upstreams[za0003].Weight, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003, "Weight")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "Upstreams", za0003)
								return
							}
						}
					}
				}
			}
		case "LoadBalanceMethod":
			z.LoadBalanceMethod, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LoadBalanceMethod")
				return
			}
		case "SecurityControl":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.SecurityControl = nil
			} else {
				if z.SecurityControl == nil {
					z.SecurityControl = new(SecurityConfig)
				}
				bts, err = z.SecurityControl.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "SecurityControl")
					return
				}
			}
		case "CacheControl":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.CacheControl = nil
			} else {
				if z.CacheControl == nil {
					z.CacheControl = new(CacheConfig)
				}
				bts, err = z.CacheControl.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "CacheControl")
					return
				}
			}
		case "CompressionEnabled":
			z.CompressionEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CompressionEnabled")
				return
			}
		case "SeoOptimizationEnabled":
			z.SeoOptimizationEnabled, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SeoOptimizationEnabled")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *VHostConfig) Msgsize() (s int) {
	s = 1 + 11 + msgp.StringPrefixSize + len(z.DomainName) + 10
	if z.TlsConfig == nil {
		s += msgp.NilSize
	} else {
		s += z.TlsConfig.Msgsize()
	}
	s += 20 + msgp.StringPrefixSize + len(z.DestinationProtocol) + 25 + msgp.MapHeaderSize
	if z.DestinationHeaderRewrite != nil {
		for za0001, za0002 := range z.DestinationHeaderRewrite {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.StringPrefixSize + len(za0002)
		}
	}
	s += 10 + msgp.ArrayHeaderSize
	for za0003 := range z.Upstreams {
		if z.Upstreams[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 5 + msgp.StringPrefixSize + len(z.Upstreams[za0003].Host) + 5 + msgp.IntSize + 7 + msgp.IntSize
		}
	}
	s += 18 + msgp.StringPrefixSize + len(z.LoadBalanceMethod) + 16
	if z.SecurityControl == nil {
		s += msgp.NilSize
	} else {
		s += z.SecurityControl.Msgsize()
	}
	s += 13
	if z.CacheControl == nil {
		s += msgp.NilSize
	} else {
		s += z.CacheControl.Msgsize()
	}
	s += 19 + msgp.BoolSize + 23 + msgp.BoolSize
	return
}
